# ===============================
# THYMELEAF
# ===============================
spring.thymeleaf.cache=false
# ===============================

# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
#spring.datasource.url=jdbc:postgresql://localhost:5432/mvgr?useSSL=false&createDatabaseIfNotExist=true
spring.datasource.url=postgres://xfeusszwkqrhpg:4cc598ff02fb21c692ba6696e642151af722e3d7415e98fff895c1acd4846e02@ec2-52-203-74-38.compute-1.amazonaws.com:5432/d7nnqdh7n0em70
#spring.datasource.username=postgres
#spring.datasource.password=postgres

spring.datasource.username=xfeusszwkqrhpg
spring.datasource.password=4cc598ff02fb21c692ba6696e642151af722e3d7415e98fff895c1acd4846e02
spring.datasource.driver-class-name=org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=create-drop

# Naming strategy
spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy


# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect